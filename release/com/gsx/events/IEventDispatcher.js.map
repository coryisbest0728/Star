{"version":3,"sources":["com/gsx/events/IEventDispatcher.ts"],"names":[],"mappings":"AAAA;;;;GAIG","file":"com/gsx/events/IEventDispatcher.js","sourcesContent":["/**\n * @file 事件触发源接口。\n *\n * @author kuanghongrui@baijiahulian.com\n */\n\nexport interface IEventDispatcher {\n    /**\n     * Register a new EventListener for the given event.\n     *\n     * @param {string} eventType Name of the event.\n     * @param {Functon} fn Callback function.\n     * @param {Mixed} context The context of the function.\n     * @api public\n     */\n    on(eventType: string, fn: Function, context?: any): IEventDispatcher;\n\n    /**\n     * Return a list of assigned event listeners.\n     *\n     * @param {string} eventType The events that should be listed.\n     * @return {Array}\n     * @api public\n     */\n    listeners(eventType: string): Function[];\n\n    /**\n     * Emit an event to all registered event listeners.\n     *\n     * @param {string} eventType The name of the event.\n     * @return {boolean} Indication if we've emitted an event.\n     * @api public\n     */\n    emit(eventType: string, ...args: any[]): boolean;\n\n    /**\n     * Add an EventListener that's only called once.\n     *\n     * @param {string} eventType Name of the event.\n     * @param {Function} fn Callback function.\n     * @param {Mixed} context The context of the function.\n     * @api public\n     */\n    once(eventType: string, fn: Function, context?: any): IEventDispatcher;\n\n    /**\n     * Remove event listeners.\n     *\n     * @param {string} eventType The event we want to remove.\n     * @param {Function} fn The listener that we need to find.\n     * @param {boolean} once Only remove once listeners.\n     * @api public\n     */\n    off(eventType: string, fn: Function, once?: boolean): IEventDispatcher;\n}\n"],"sourceRoot":"/source/"}