{"version":3,"sources":["com/gsx/events/EventDispatcher.ts"],"names":["EventDispatcher","EventDispatcher.constructor","EventDispatcher.on","EventDispatcher.listeners","EventDispatcher.emit","EventDispatcher.once","EventDispatcher.off"],"mappings":"AAAA;;;;GAIG;;IAKH,sDAAsD;IACtD,iDAAiD;IAEjD;QAIIA;YACIC,IAAIA,CAACA,YAAYA,GAAGA,IAAIA,aAAaA,CAACA,YAAYA,EAAEA,CAACA;QACzDA,CAACA;QAEDD;;;;;;;WAOGA;QACIA,4BAAEA,GAATA,UAAUA,SAAiBA,EAAEA,EAAYA,EAAEA,OAAaA;YACpDE,IAAIA,CAACA,YAAYA,CAACA,EAAEA,CAACA,SAASA,EAAEA,EAAEA,EAAEA,OAAOA,CAACA,CAACA;YAC7CA,MAAMA,CAACA,IAAIA,CAACA;QAChBA,CAACA;QAEDF;;;;;;WAMGA;QACIA,mCAASA,GAAhBA,UAAiBA,SAAiBA;YAC9BG,MAAMA,CAACA,IAAIA,CAACA,YAAYA,CAACA,SAASA,CAACA,SAASA,CAACA,CAACA;QAClDA,CAACA;QAEDH;;;;;;WAMGA;QACIA,8BAAIA,GAAXA,UAAYA,SAAiBA;YAAEI,cAAcA;iBAAdA,WAAcA,CAAdA,sBAAcA,CAAdA,IAAcA;gBAAdA,6BAAcA;;YACzCA,MAAMA,CAACA,IAAIA,CAACA,YAAYA,OAAjBA,IAAIA,GAAcA,SAASA,SAAKA,IAAIA,EAACA,CAACA;QACjDA,CAACA;QAEDJ;;;;;;;WAOGA;QACIA,8BAAIA,GAAXA,UAAYA,SAAiBA,EAAEA,EAAYA,EAAEA,OAAaA;YACtDK,IAAIA,CAACA,YAAYA,CAACA,IAAIA,CAACA,SAASA,EAAEA,EAAEA,EAAEA,OAAOA,CAACA,CAACA;YAC/CA,MAAMA,CAACA,IAAIA,CAACA;QAChBA,CAACA;QAEDL;;;;;;;WAOGA;QACIA,6BAAGA,GAAVA,UAAWA,SAAiBA,EAAEA,EAAYA,EAAEA,IAAcA;YACtDM,IAAIA,CAACA,YAAYA,CAACA,GAAGA,CAACA,SAASA,EAAEA,EAAEA,EAAEA,IAAIA,CAACA,CAACA;YAC3CA,MAAMA,CAACA,IAAIA,CAACA;QAChBA,CAACA;QACLN,sBAACA;IAADA,CApEA,AAoECA,IAAA;IApEY,uBAAe,kBAoE3B,CAAA","file":"com/gsx/events/EventDispatcher.js","sourcesContent":["/**\n * @file 事件触发源实现。\n *\n * @author kuanghongrui@baijiahulian.com\n */\n\n/// <reference path=\"../../../../lib/typings/eventemitter3/eventemitter3.d.ts\" />\n\nimport {IEventDispatcher} from 'com/gsx/events/IEventDispatcher';\n//import {IEventDispatcher} from './IEventDispatcher';\n//import EventEmitter = require('eventemitter3');\n\nexport class EventDispatcher implements IEventDispatcher {\n\n    private eventEmitter;\n\n    public constructor() {\n        this.eventEmitter = new EventEmitter3.EventEmitter();\n    }\n\n    /**\n     * @override\n     * Register a new EventListener for the given event.\n     *\n     * @param {string} eventType Name of the event.\n     * @param {Functon} fn Callback function.\n     * @param {Mixed} context The context of the function.\n     */\n    public on(eventType: string, fn: Function, context?: any): IEventDispatcher {\n        this.eventEmitter.on(eventType, fn, context);\n        return this;\n    }\n\n    /**\n     * @override\n     * Return a list of assigned event listeners.\n     *\n     * @param {string} eventType The events that should be listed.\n     * @return {Array}\n     */\n    public listeners(eventType: string): Function[] {\n        return this.eventEmitter.listeners(eventType);\n    }\n\n    /**\n     * @override\n     * Emit an event to all registered event listeners.\n     *\n     * @param {string} eventType The name of the event.\n     * @return {boolean} Indication if we've emitted an event.\n     */\n    public emit(eventType: string, ...args: any[]): boolean {\n        return this.eventEmitter(eventType, ...args);\n    }\n\n    /**\n     * @override\n     * Add an EventListener that's only called once.\n     *\n     * @param {string} eventType Name of the event.\n     * @param {Function} fn Callback function.\n     * @param {Mixed} context The context of the function.\n     */\n    public once(eventType: string, fn: Function, context?: any): IEventDispatcher {\n        this.eventEmitter.once(eventType, fn, context);\n        return this;\n    }\n\n    /**\n     * @override\n     * Remove event listeners.\n     *\n     * @param {string} eventType The event we want to remove.\n     * @param {Function} fn The listener that we need to find.\n     * @param {boolean} once Only remove once listeners.\n     */\n    public off(eventType: string, fn: Function, once?: boolean): IEventDispatcher {\n        this.eventEmitter.off(eventType, fn, once);\n        return this;\n    }\n}\n"],"sourceRoot":"/source/"}